window.onload = () => {
    const STATE = {
        count:      0,          // # of games loaded
        nx:         undefined,  // # of columns
        ny:         undefined,  // # of rows
        state:      undefined,  // {"normal", "hover", "pressed", "lost", "win"}
        running:    undefined,  // true if clock running
        bomb_value: undefined,  // # of bombs minus # of flags
        time_value: undefined,  // time since start
        bomb:       undefined,  // # of adjacent bombs (or -1 if bomb)
        cell:       undefined,  // {"cover", "reveal", "flag", "hover", "wrong"}
    };
    const DOM = {cell: undefined};
    const ID = ["select", "face", "board", "game", "dash", "time"];
    for (const id of ["bomb", "time"]) {
        for (let i = 0; i < 3; ++i) {
            ID.push(`${id}_digit_${i}`);
        }
    }
    for (const id of ID) {
        DOM[id] = document.getElementById(id);
    }
    DOM.face.onmousedown = () => {
        STATE.state = "pressed";
        update_draw(DOM, STATE);
    };
    DOM.face.onmouseout = () => {
        if (STATE.state == "pressed") { STATE.state = "normal"; }
        update_draw(DOM, STATE);
    };
    DOM.face.onmouseup = () => {
        if (STATE.state != "pressed") { return; }
        reset(DOM, STATE);
    };
    DOM.face.ontouchend = () => reset(DOM, STATE);
    document.onmouseup = () => {
        if (STATE.state != "hover") { return; }
        STATE.state = "normal";
        update_draw(DOM, STATE);
    };
    document.oncontextmenu = (e) => e.preventDefault();
    DOM.select.onchange = (e) => reset(DOM, STATE);
    make_graphics(ICONS);
    reset(DOM, STATE);
};

const reset = (DOM, STATE) => {
    const [nx, ny, nb] = LEVELS[DOM.select.value];
    const [w, h] = [8*nx, 16*ny];
    for (const [d, a, l] of [               // resize board graphics
        [ "game",  "width", 2*w + 22],
        [ "game", "height",   h + 72],
        ["board",  "width",      2*w],
        ["board", "height",        h],
        [ "dash",  "width",      2*w],
        [ "face",   "left",   w - 13],
        [ "time",   "left", 2*w - 48],
    ]) {
        DOM[d].style[a] = `${l}px`;
    }
    STATE.state = "normal";
    STATE.count += 1;
    STATE.nx = nx;
    STATE.ny = ny;
    STATE.running = false;
    STATE.bomb_value = nb;
    STATE.time_value = 0;
    STATE.bomb = Array(ny).fill().map(() => Array(nx).fill(0));
    STATE.cell = Array(ny).fill().map(() => Array(nx).fill("cover"));
    const n = nx*ny;
    const B = Array(n).fill(0).map((_, i) => (i < nb) ? -1 : 0);
    for (let i = 0; i < nb; ++i) {          // randomize bomb placement
        const j = i + Math.floor(Math.random()*(n - i));
        [B[i], B[j]] = [B[j], B[i]];
    }
    for (let y = 0; y < ny; ++y) {          // compute bomb adjacency
        for (let x = 0; x < nx; ++x) {
            const b = B[nx*y + x];
            if (b != -1) { continue; }
            STATE.bomb[y][x] = b;
            for (const dy of [-1, 0, 1]) {
                for (const dx of [-1, 0, 1]) {
                    const [x2, y2] = [x + dx, y + dy];
                    if (((x2 < 0) || (nx <= x2)) ||
                        ((y2 < 0) || (ny <= y2)) ||
                        (STATE.bomb[y2][x2] == -1)
                    ) { continue; }
                    STATE.bomb[y2][x2] += 1;
                }
            }
        }
    }
    while (DOM.board.children.length > 0) { // clear board in DOM
        DOM.board.children[0].remove();
    }
    DOM.cell = Array(ny).fill().map(() => Array(nx).fill());
    for (let y = 0; y < ny; ++y) {          // repopulate board in DOM
        for (let x = 0; x < nx; ++x) {
            const div = document.createElement("div");
            DOM.board.append(div);
            DOM.cell[y][x]  = div;
            div.style.top   = `${y*16}px`;
            div.style.left  = `${x*16}px`;
            div.onmousedown = (e) => update_board(DOM, STATE, e, [x, y]);
            div.onmouseout  = (e) => update_board(DOM, STATE, e, [x, y]);
            div.onmouseover = (e) => update_board(DOM, STATE, e, [x, y]);
            div.onmouseup   = (e) => update_board(DOM, STATE, e, [x, y]);
            div.ontouchend  = (e) => update_board(DOM, STATE, e, [x, y]);
        }
    }
    update_timer(DOM, STATE, STATE.count);
    update_draw(DOM, STATE);
};

const update_draw = (DOM, STATE) => {
    for (const id of ["time", "bomb"]) {
        let val = STATE[`${id}_value`];
        for (let i = 2; i >= 0; --i) {
            const d = val % 10;
            DOM[`${id}_digit_${i}`].className = `d${d}`;
            val = (val - d)/10;
        }
    }
    DOM.face.className = STATE.state;
    const {nx, ny} = STATE;
    for (let y = 0; y < ny; ++y) {
        for (let x = 0; x < nx; ++x) {
            const bomb = STATE.bomb[y][x];
            let icon = "cover";
            switch (STATE.cell[y][x]) {
                case "hover":  icon = "t0";     break;
                case "flag":   icon = "flag";   break;
                case "wrong":  icon = (bomb < 0) ? "explode" : "wrong"; break;
                case "reveal": icon = (bomb < 0) ? "bomb" : `t${bomb}`; break;
            }
            DOM.cell[y][x].className = icon; 
        }
    }
};

const update_timer = (DOM, STATE, count) => {
    if (STATE.count != count) { return; }
    if (STATE.running) {
        STATE.time_value += 1;
        if (STATE.time_value == 999) {
            STATE.count += 1;
            STATE.state = "lost";
            const {nx, ny} = STATE;
            for (let y = 0; y < ny; ++y) {
                for (let x = 0; x < nx; ++x) {
                    if (STATE.bomb[y][x] != -1) { continue; }
                    STATE.cell[y][x] = "reveal";
                }
            }
        } else {
            window.setTimeout((() => update_timer(DOM, STATE, count)), 1000);
        }
    }
    update_draw(DOM, STATE);
};

const update_board = (DOM, STATE, e, [ex, ey]) => {
    const {type, button} = e;
    if ((STATE.state == "win") || (STATE.state == "lost")) { return; }
    const {nx, ny} = STATE;
    if (button == 2) {
        if ((type != "mousedown") || !STATE.running) { return; }
        let cell = STATE.cell[ey][ex];
        switch (cell) {
            case "cover": cell =  "flag"; STATE.bomb_value--; break;
            case "flag":  cell = "cover"; STATE.bomb_value++; break;
        }
        STATE.cell[ey][ex] = cell;
        update_draw(DOM, STATE);
        return; 
    }
    if ((STATE.state == "normal") &&
        ((type == "mouseover") || (type == "mouseout"))
    ) { return; }
    const ecell = STATE.cell[ey][ex];
    switch (type) {
        case "mousedown":
            if ((STATE.state == "normal") && (ecell == "cover")) {
                STATE.state = "hover";
                STATE.cell[ey][ex] = "hover";
            }
            update_draw(DOM, STATE);
            return;
        case "mouseover":
            if ((STATE.state == "hover") && (ecell == "cover")) {
                STATE.cell[ey][ex] = "hover";
            }
            update_draw(DOM, STATE);
            return;
        case "mouseout":
            if ((STATE.state == "hover") && (ecell == "hover")) {
                STATE.cell[ey][ex] = "cover";
            }
            break;
        case "mouseup": // fallthrough
        case "touchend":
            if (STATE.state != "hover") { return; }
            if (!STATE.running) {
                STATE.running = true;
                update_timer(DOM, STATE, STATE.count);
            }
            const ebomb = STATE.bomb[ey][ex];
            if (ecell == "reveal") { break; }
            if (ebomb == -1) {     // losing condition
                STATE.state = "lost";
                for (let y = 0; y < ny; ++y) {
                    for (let x = 0; x < nx; ++x) {
                        const bomb = STATE.bomb[y][x];
                        if ((STATE.cell[y][x] == "flag") && (bomb != -1)) {
                            STATE.cell[y][x] = "wrong";
                        }
                        if (bomb == -1) {
                            STATE.cell[y][x] = "reveal";
                        }
                    }
                }
                STATE.cell[ey][ex] = "wrong";
                STATE.bomb_value = 0;
                STATE.count += 1;
                break;
            }
            STATE.state = "normal";
            const Q = [[ex, ey]];
            let qi = 0;
            while (qi < Q.length) {     // reveal accessible
                const [x, y] = Q[qi++];
                STATE.cell[y][x] = "reveal";
                if (STATE.bomb[y][x] != 0) { continue; }
                for (const dx of [-1, 0, 1]) {
                    for (const dy of [-1, 0, 1]) {
                        const [x_, y_] = [x + dx, y + dy];
                        if (((x_ < 0) || (nx <= x_)) ||
                            ((y_ < 0) || (ny <= y_)) ||
                            (STATE.cell[y_][x_] == "reveal")
                        ) { continue; }
                        Q.push([x_, y_]); 
                    }
                }
            }
            STATE.state = "win";        // check win
            for (let y = 0; y < ny; ++y) {
                for (let x = 0; x < nx; ++x) {
                    if ((STATE.bomb[y][x] != -1) &&
                        (STATE.cell[y][x] != "reveal")
                    ) { STATE.state = "normal"; }
                }
            }
            if (STATE.state != "win") { break; }
            STATE.bomb_value = 0;
            STATE.count += 1;           // reveal bombs
            for (let y = 0; y < ny; ++y) {
                for (let x = 0; x < nx; ++x) {
                    if (STATE.bomb[y][x] != -1) { continue; }
                    STATE.cell[y][x] = "flag";
                }
            }
    }
    update_draw(DOM, STATE);
};

const make_graphics = (imgs) => {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    const style = document.createElement("style");
    style.innerHTML = Object.keys(imgs).map(k => {
        const L = imgs[k].split("\n");
        const h = L.length;
        const w = L[0].length;
        canvas.width = w;
        canvas.height = h;
        const img = ctx.createImageData(w, h);
        const data = img.data
        for (let y = 0; y < h; ++y) {
            for (let x = 0; x < w; ++x) {
                const color = ICON_COLORS[L[y][x]];
                const i = (w*y + x) << 2;
                for (const d of [0, 1, 2, 3]) {
                    data[i + d] = color[d];
                }
            }
        }
        ctx.putImageData(img, 0, 0);
        const uri = canvas.toDataURL('image/png');
        return `\
.${k} {
    width: ${w}px;
    height: ${h}px;
    background-image: url(${uri});
}`;
    }).join("\n");
    document.head.appendChild(style);
};

const LEVELS = {  // nx  ny  nb
    beginner:       [ 9,  9, 10],
    intermediate:   [16, 16, 40],
    expert:         [30, 16, 99],
};

const COLORS = { //    R   G   B   A
    clear:          [  0,  0,  0,  0],
    black:          [  0,  0,  0,255],
    white:          [255,255,255,255],
    gray:           [123,123,123,255],
    lightgray:      [189,189,189,255],
    red:            [255,  0,  0,255],
    darkred:        [123,  0,  0,255],
    yellow:         [255,255,  0,255],
    blue:           [  0,  0,255,255],
    green:          [  0,123,  0,255],
    darkblue:       [  0,  0,123,255],
    teal:           [  0,123,123,255],
};

const ICON_COLORS = {
    ",": COLORS.white,
    "#": COLORS.black,
    ".": COLORS.clear,
    "*": COLORS.gray,
    "+": COLORS.red,
    "-": COLORS.darkred,
    "'": COLORS.yellow,
    "1": COLORS.blue,
    "2": COLORS.green,
    "3": COLORS.red,
    "4": COLORS.darkblue,
    "5": COLORS.darkred,
    "6": COLORS.teal,
    "7": COLORS.black,
    "8": COLORS.gray,
};

const ICONS = {
    t0: `\
****************
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............
*...............`,
    t1: `\
****************
*...............
*...............
*.......11......
*......111......
*.....1111......
*....11111......
*......111......
*......111......
*......111......
*......111......
*....1111111....
*....1111111....
*...............
*...............
*...............`,
    t2: `\
****************
*...............
*...............
*...22222222....
*..2222222222...
*..222....222...
*.........222...
*.......2222....
*.....22222.....
*...22222.......
*..2222.........
*..2222222222...
*..2222222222...
*...............
*...............
*...............`,
    t3: `\
****************
*...............
*...............
*..333333333....
*..3333333333...
*.........333...
*.........333...
*.....333333....
*.....333333....
*.........333...
*.........333...
*..3333333333...
*..333333333....
*...............
*...............
*...............`,
    t4: `\
****************
*...............
*...............
*....444.444....
*....444.444....
*...444..444....
*...444..444....
*..4444444444...
*..4444444444...
*........444....
*........444....
*........444....
*........444....
*...............
*...............
*...............`,
    t5: `\
****************
*...............
*...............
*..5555555555...
*..5555555555...
*..555..........
*..555..........
*..555555555....
*..5555555555...
*.........555...
*.........555...
*..5555555555...
*..555555555....
*...............
*...............
*...............`,
    t6: `\
****************
*...............
*...............
*...66666666....
*..666666666....
*..666..........
*..666..........
*..666666666....
*..666666666....
*..666....666...
*..666....666...
*..6666666666...
*...66666666....
*...............
*...............
*...............`,
    t7: `\
****************
*...............
*...............
*..7777777777...
*..7777777777...
*.........777...
*.........777...
*........777....
*........777....
*.......777.....
*.......777.....
*......777......
*......777......
*...............
*...............
*...............`,
    t8: `\
****************
*...............
*...............
*...88888888....
*..8888888888...
*..888....888...
*..888....888...
*...88888888....
*...88888888....
*..888....888...
*..888....888...
*..8888888888...
*...88888888....
*...............
*...............
*...............`,
    cover: `\
,,,,,,,,,,,,,,,.
,,,,,,,,,,,,,,.*
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,,............**
,.**************
.***************`,
    flag: `\
,,,,,,,,,,,,,,,.
,,,,,,,,,,,,,,.*
,,............**
,,.....++.....**
,,...++++.....**
,,..+++++.....**
,,...++++.....**
,,.....++.....**
,,......#.....**
,,......#.....**
,,....####....**
,,..########..**
,,..########..**
,,............**
,.**************
.***************`,
    bomb: `\
****************
*...............
*.......#.......
*.......#.......
*...#.#####.#...
*....#######....
*...##,,#####...
*...##,,#####...
*.#############.
*...#########...
*...#########...
*....#######....
*...#.#####.#...
*.......#.......
*.......#.......
*...............`,
    wrong: `\
****************
*...............
*.......#.......
*.++....#....++.
*..++.#####.++..
*...++#####++...
*...#++,##++#...
*...##++#++##...
*.#####+++#####.
*...###+++###...
*...##++#++##...
*....++###++....
*...++#####++...
*..++...#...++..
*.++....#....++.
*...............`,
    explode: `\
****************
*+++++++++++++++
*+++++++#+++++++
*+++++++#+++++++
*+++#+#####+#+++
*++++#######++++
*+++##,,#####+++
*+++##,,#####+++
*+#############+
*+++#########+++
*+++#########+++
*++++#######++++
*+++#+#####+#+++
*+++++++#+++++++
*+++++++#+++++++
*+++++++++++++++`,
    d0: `\
.............
..+++++++++..
.+.+++++++.+.
.++.+++++.++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.......++.
.+..-.-.-..+.
...-.-.-.-...
.+..-.-.-..+.
.++.......++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.+++++.++.
.+.+++++++.+.
..+++++++++..
.............`,
    d1: `\
.............
...-.-.-.-...
.-..-.-.-..+.
..-..-.-..++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.......++.
.-..-.-.-..+.
...-.-.-.-...
.-..-.-.-..+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-..-.-..++.
.-..-.-.-..+.
...-.-.-.-...
.............`,
    d2: `\
.............
..+++++++++..
.-.+++++++.+.
..-.+++++.++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.......++.
.-.+++++++.+.
..+++++++++..
.+.+++++++.-.
.++.......-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.++.+++++.-..
.+.+++++++.-.
..+++++++++..
.............`,
    d3: `\
.............
..+++++++++..
.-.+++++++.+.
..-.+++++.++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.......++.
.-.+++++++.+.
..+++++++++..
.-.+++++++.+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.+++++.++.
.-.+++++++.+.
..+++++++++..
.............`,
    d4: `\
.............
...-.-.-.-...
.+..-.-.-..+.
.++..-.-..++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.......++.
.+.+++++++.+.
..+++++++++..
.-.+++++++.+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-..-.-..++.
.-..-.-.-..+.
...-.-.-.-...
.............`,
    d5: `\
.............
..+++++++++..
.+.+++++++.-.
.++.+++++.-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.++.......-..
.+.+++++++.-.
..+++++++++..
.-.+++++++.+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.+++++.++.
.-.+++++++.+.
..+++++++++..
.............`,
    d6: `\
.............
..+++++++++..
.+.+++++++.-.
.++.+++++.-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.+++......-..
.+++.....-.-.
.++.......-..
.+.+++++++.-.
..+++++++++..
.+.+++++++.+.
.++.......++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.+++++.++.
.+.+++++++.+.
..+++++++++..
.............`,
    d7: `\
.............
..+++++++++..
.-.+++++++.+.
..-.+++++.++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.......++.
.-..-.-.-..+.
...-.-.-.-...
.-..-.-.-..+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-..-.-..++.
.-..-.-.-..+.
...-.-.-.-...
.............`,
    d8: `\
.............
..+++++++++..
.+.+++++++.+.
.++.+++++.++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.......++.
.+.+++++++.+.
..+++++++++..
.+.+++++++.+.
.++.......++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.+++++.++.
.+.+++++++.+.
..+++++++++..
.............`,
    d9: `\
.............
..+++++++++..
.+.+++++++.+.
.++.+++++.++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.+++.....+++.
.++.......++.
.+.+++++++.+.
..+++++++++..
.-.+++++++.+.
..-.......++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-......+++.
.-.-.....+++.
..-.+++++.++.
.-.+++++++.+.
..+++++++++..
.............`,
    d10: `\
.............
...-.-.-.-...
.-..-.-.-..-.
..-..-.-..-..
.-.-.....-.-.
..-.......-..
.-.-.....-.-.
..-.......-..
.-.-.....-.-.
..-.......-..
.-.+++++++.-.
..+++++++++..
.-.+++++++.-.
..-.......-..
.-.-.....-.-.
..-.......-..
.-.-.....-.-.
..-.......-..
.-.-.....-.-.
..-..-.-..-..
.-..-.-.-..-.
...-.-.-.-...
.............`,
    normal: `\
*************************.
*,,,,,,,,,,,,,,,,,,,,,,,.*
*,,,,,,,,,,,,,,,,,,,,,,.**
*,,....................***
*,,....................***
*,,........#####.......***
*,,......##'''''##.....***
*,,.....#'''''''''#....***
*,,....#'''''''''''#...***
*,,...#'''''''''''''#..***
*,,...#'''##'''##'''#..***
*,,..#''''##'''##''''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''''''''''''#.***
*,,..#'''#'''''''#'''#.***
*,,...#'''#'''''#'''#..***
*,,...#''''#####''''#..***
*,,....#'''''''''''#...***
*,,.....#'''''''''#....***
*,,......##'''''##.....***
*,,........#####.......***
*,,....................***
*,.***********************
*.************************
.*************************`,
    pressed: `\
*************************.
**************************
**.......................*
**.......................*
**.......................*
**.......................*
**..........#####........*
**........##'''''##......*
**.......#'''''''''#.....*
**......#'''''''''''#....*
**.....#'''''''''''''#...*
**.....#'''##'''##'''#...*
**....#''''##'''##''''#..*
**....#'''''''''''''''#..*
**....#'''''''''''''''#..*
**....#'''''''''''''''#..*
**....#'''#'''''''#'''#..*
**.....#'''#'''''#'''#...*
**.....#''''#####''''#...*
**......#'''''''''''#....*
**.......#'''''''''#.....*
**........##'''''##......*
**..........#####........*
**.......................*
**.......................*
.*************************`,
    hover: `\
*************************.
*,,,,,,,,,,,,,,,,,,,,,,,.*
*,,,,,,,,,,,,,,,,,,,,,,.**
*,,....................***
*,,....................***
*,,........#####.......***
*,,......##'''''##.....***
*,,.....#'''''''''#....***
*,,....#'''''''''''#...***
*,,...#''*#*'''*#*''#..***
*,,...#''###'''###''#..***
*,,..#'''*#*'''*#*'''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''''''''''''#.***
*,,..#''''''###''''''#.***
*,,..#'''''*#'#*'''''#.***
*,,...#''''#'''#''''#..***
*,,...#''''*#'#*''''#..***
*,,....#''''###''''#...***
*,,.....#'''''''''#....***
*,,......##'''''##.....***
*,,........#####.......***
*,,....................***
*,.***********************
*.************************
.*************************`,
    lost: `\
*************************.
*,,,,,,,,,,,,,,,,,,,,,,,.*
*,,,,,,,,,,,,,,,,,,,,,,.**
*,,....................***
*,,....................***
*,,........#####.......***
*,,......##'''''##.....***
*,,.....#'''''''''#....***
*,,....#'''''''''''#...***
*,,...#''#'#'''#'#''#..***
*,,...#'''#'''''#'''#..***
*,,..#'''#'#'''#'#'''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''''''''''''#.***
*,,..#'''''#####'''''#.***
*,,...#'''#'''''#'''#..***
*,,...#''#'''''''#''#..***
*,,....#'''''''''''#...***
*,,.....#'''''''''#....***
*,,......##'''''##.....***
*,,........#####.......***
*,,....................***
*,.***********************
*.************************
.*************************`,
    win: `\
*************************.
*,,,,,,,,,,,,,,,,,,,,,,,.*
*,,,,,,,,,,,,,,,,,,,,,,.**
*,,....................***
*,,....................***
*,,........#####.......***
*,,......##'''''##.....***
*,,.....#'''''''''#....***
*,,....#'''''''''''#...***
*,,...#'''''''''''''#..***
*,,...#'''''''''''''#..***
*,,..#''###########''#.***
*,,..#'#'####'####'#'#.***
*,,..##''####'####''##.***
*,,..#'''*##'''##*'''#.***
*,,..#'''''''''''''''#.***
*,,...#'''''''''''''#..***
*,,...#'''#'''''#'''#..***
*,,....#'''#####'''#...***
*,,.....#'''''''''#....***
*,,......##'''''##.....***
*,,........#####.......***
*,,....................***
*,.***********************
*.************************
.*************************`,
};
